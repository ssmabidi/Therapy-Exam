// Practice Exam
// Copyright 2016 Therapy Exam Prep
// Author: Alberto Fonseca

// urls - production
/*const EXAM_URL = "https://therapyexamprep.com/products/practice-exam/exam.php";
const SURVEY_URL = "https://therapyexamprep.com/products/practice-exam/client/practiceexam-survey/page0.php";
const ERROR_URL = "https://therapyexamprep.com/products/practice-exam/exam-error-handler.php";*/


// urls - staging
const EXAM_URL = "https://therapyexamprep.com/products/practice-exam-staging/exam.php";
const SURVEY_URL = "https://therapyexamprep.com/rackforms/output/forms/practiceexam-survey/page0.php";
const ERROR_URL = "https://therapyexamprep.com/products/practice-exam-staging/exam-error-handler.php";

// global namespace
var TEP_EXAM = TEP_EXAM || {};

// Event Emitter
// https://github.com/Olical/EventEmitter/blob/master/docs/guide.md
TEP_EXAM.eventEmitter = new EventEmitter();


//  MODEL
//
TEP_EXAM.model = {
    questions: {},
    currentQuestion: {},
    answers: [], // this is a shortcut reference to state variable
    EXAM_TIME:             5, // hours
    BREAK_TIME:           15, // minutes
    QUESTIONS_IN_SECTION: 50,
    errorCondition:     null, // 'ERROR_NET', 'ERROR_BROWSER', ERROR_START',
                              // 'ERROR_SUBMIT', ERROR_SAVE
    errorMessage:       null, // string with details about error condition
    
    // Easy Timer
    // http://albert-gonzalez.github.io/easytimer.js/
    timer: new Timer(),
    breakTimer: new Timer(),
    questionTimer: new Timer(),    
                     
    // initialize()  
    initialize: function (id) {
        this.state.initialize(id);        
    },
    
    // startTimer()
    startTimer: function(callbackSecondsUpdated) {  
        var time = getFormattedDate();        
        //console.log(time + " startTimer() called."); 
        // First time starting exam
        if (TEP_EXAM.model.state.startTime == null)
        {
            // Save start time
            TEP_EXAM.model.state.startTime = moment().unix();
            
            // Calculate exam time using scale value
            var examMinutes = TEP_EXAM.model.EXAM_TIME * 
                TEP_EXAM.model.state.timeScale * 60;

            // Start countdown exam timer
            this.timer.start({countdown: true, 
                startValues: {minutes: examMinutes}});
            this.timer.addEventListener('secondsUpdated', function(e) {
                TEP_EXAM.model.checkTimersAndUpdate();
                callbackSecondsUpdated();
            }); 
            this.timer.addEventListener('targetAchieved', TEP_EXAM.model.timerExpired);     
        }
        // Resume timer from in-progress exam
        else
        {
            //console.log("Resuming timer.");
            // Moment.js
            // http://momentjs.com/        
            var momentStarted = moment.unix(TEP_EXAM.model.state.startTime);
            
            // If any exam time remaining
            if (moment().diff(momentStarted, 'hours', true) < 
                TEP_EXAM.model.EXAM_TIME * TEP_EXAM.model.state.timeScale)
            {
                // Resuming paused timer.                                
                if (this.timer.isPaused())
                {
                    //console.log("Resuming paused timer.");
                    this.timer.start();
                    //console.log(this.timer.getTimeValues().toString());
                }
                // Set up timer by calculating time left
                else
                {
                    var exam_end = momentStarted.add(TEP_EXAM.model.EXAM_TIME * 
                        TEP_EXAM.model.state.timeScale, 'hours');
                    var remaining = exam_end.diff(moment(), 'seconds');
                    
                    // If break was taken, add break time back in.
                    if (TEP_EXAM.model.state.breakEndTime)
                    {
                        var momentBreakStart = moment.unix(TEP_EXAM.model.state.breakStartTime);
                        var momentBreakEnd = moment.unix(TEP_EXAM.model.state.breakEndTime);
                        var breakTimeUsed = momentBreakEnd.diff(momentBreakStart, 'seconds'); 
                        //console.log("Adding break seconds back to clock:" + breakTimeUsed);
                        remaining += (breakTimeUsed);
                    }
                    //console.log("Resuming timer at: ");
                    this.timer.start({countdown: true, startValues: {seconds: remaining}});
                    //console.log(this.timer.getTimeValues().toString() + "\n");
                
                    this.timer.addEventListener('secondsUpdated', function(e) {
                        TEP_EXAM.model.checkTimersAndUpdate();
                        callbackSecondsUpdated();
                    }); 
                    this.timer.addEventListener('targetAchieved', TEP_EXAM.model.timerExpired);
                }                
            }
            // Exam timer exceeded, change to intermission state
            else
            {
                // Save elapsed time in seconds, setting to max time allotted
                TEP_EXAM.model.state.elapsedTime = TEP_EXAM.model.EXAM_TIME * 
                    TEP_EXAM.model.state.timeScale * 60 * 60;
                TEP_EXAM.model.state.changeState("intermission");
                TEP_EXAM.eventEmitter.emitEvent('EVENT_EXAM_TIMER_EXPIRED');                
            }
        }        
    },
    
    // stopTimer()
    // Stop the exam timer when exam is completed and save elapsed time.
    stopTimer: function () {
        this.timer.stop();

        var momentStarted = moment.unix(TEP_EXAM.model.state.startTime);
        
        // Get overall elapsed exam time
        var elapsed = moment.duration(moment().diff(momentStarted, 'seconds'), 
            'seconds');

        //console.log("Elapsed time: " + elapsed.asSeconds() + "\n");

        // If reached scheduled break
        if (TEP_EXAM.model.state.breakStartTime != null)
        {
            // Calculate scheduled break time used.
            var momentBreakStart = moment.unix(TEP_EXAM.model.state.breakStartTime);
            var momentBreakEnd = moment.unix(TEP_EXAM.model.state.breakEndTime);
            var breakDuration = momentBreakEnd.diff(momentBreakStart, 'seconds');

            //console.log("Break time used: " + breakDuration + "\n");

            // Subtract the used break time.
            elapsed.subtract(breakDuration, 'seconds');

            //console.log("Final Elapsed time: " + elapsed.asSeconds() + "\n");            
        }

        // If elapsed time is less than max allotted
        if (elapsed.asSeconds() < (TEP_EXAM.model.EXAM_TIME * 
            TEP_EXAM.model.state.timeScale * 60 * 60))
        {
            // Set elapsed time in state        
            TEP_EXAM.model.state.elapsedTime = elapsed.asSeconds();            
        }
        // Went over max alloted time
        else
        {
            // Save elapsed time in seconds, setting to max time allotted
            TEP_EXAM.model.state.elapsedTime = TEP_EXAM.model.EXAM_TIME * 
                TEP_EXAM.model.state.timeScale * 60 * 60;            
        }                             
    },

    // checkTimersAndUpdate
    // See if timers have gone out of sync since start time.
    // This can happen if the device goes to sleep after some time.
    checkTimersAndUpdate: function () {
        // If not on scheduled break
        if (TEP_EXAM.model.state.intermissionMode != "scheduled-break")
        {
            if (TEP_EXAM.model.timer.isRunning() == false)
            {
                return;
            }
            var momentStarted = moment.unix(TEP_EXAM.model.state.startTime);
            var momentEnding = momentStarted.add(TEP_EXAM.model.EXAM_TIME * 
            TEP_EXAM.model.state.timeScale, 'hours'); 
            
            var secondsRemaining = momentEnding.diff(moment(), 'seconds');
            var timerSecondsRemaining = TEP_EXAM.model.timer.getTotalTimeValues().seconds;

            // If break was taken, add break time back in.
            if (TEP_EXAM.model.state.breakEndTime)
            {
                var momentBreakStart = moment.unix(TEP_EXAM.model.state.breakStartTime);
                var momentBreakEnd = moment.unix(TEP_EXAM.model.state.breakEndTime);
                var breakTimeUsed = momentBreakEnd.diff(momentBreakStart, 'seconds'); 
                //console.log("Adding break seconds back to clock:" + breakTimeUsed);
                secondsRemaining += (breakTimeUsed);
            }

            if (secondsRemaining < 0)
            {
                secondsRemaining = 0;
            }

            var time = getFormattedDate();
            //console.log(time + " Seconds remaining: " + secondsRemaining + "\n");
            //console.log(time + " Timer seconds remaining: " + timerSecondsRemaining + "\n");                
            
            // If exam timer differs from calculated exam time remaining
            if (Math.abs(secondsRemaining - timerSecondsRemaining) > 2)
            {
                //console.log(time + " -=-=-=-Restarting exam timer-=-=-=-\n");

                // Restart countdown exam timer
                TEP_EXAM.model.timer.stop();
                TEP_EXAM.model.timer.start({countdown: true, 
                    startValues: {seconds: secondsRemaining}});
            }

        }
        // If on scheduled break
        else
        {
            if (TEP_EXAM.model.breakTimer.isRunning() == false)
            {
                return;
            }
            
            // Get break start time
            var momentStarted = moment.unix(TEP_EXAM.model.state.breakStartTime);
            var momentEnding = momentStarted.add(TEP_EXAM.model.BREAK_TIME * 
                TEP_EXAM.model.state.timeScale * 60, 'seconds');

            var secondsRemaining = momentEnding.diff(moment(), 'seconds');
            var timerSecondsRemaining = TEP_EXAM.model.breakTimer.getTotalTimeValues().seconds;

            var time = getFormattedDate();
            //console.log(time + " Break seconds remaining: " + secondsRemaining + "\n");
            //console.log(time + " Break timer seconds remaining: " + timerSecondsRemaining + "\n");                

            // If break time exceeded
            if (secondsRemaining < 0)
            {
                secondsRemaining = 0;

                //console.log("No break time remains, setting end break time.");
                // Save break end time (maximum allowed)
                TEP_EXAM.model.state.breakEndTime = momentEnding.unix();
            }

            // If exam timer differs from calculated break time remaining
            if (Math.abs(secondsRemaining - timerSecondsRemaining) > 2)
            {
                var time = getFormattedDate();                
                //console.log(time + " -=-=-=-Restarting break timer-=-=-=-\n");
                    
                // Restart countdown exam timer
                TEP_EXAM.model.breakTimer.stop();
                TEP_EXAM.model.breakTimer.start({countdown: true, 
                    startValues: {seconds: secondsRemaining}});
            }                        
        }
    },
    
    // timerExpired()
    timerExpired: function () {
        //console.log("Exam Time Expired.");  
        if (TEP_EXAM.model.state === "question")
        {
            TEP_EXAM.model.stopQuestionTimer();
        }      
        var momentStarted = moment.unix(TEP_EXAM.model.state.startTime);
        
        // Save elapsed time in seconds, setting to max time allotted
        TEP_EXAM.model.state.elapsedTime = TEP_EXAM.model.EXAM_TIME * 
            TEP_EXAM.model.state.timeScale * 60 * 60;            
            
        TEP_EXAM.model.state.changeState("intermission");
        TEP_EXAM.eventEmitter.emitEvent('EVENT_EXAM_TIMER_EXPIRED');
    },
    
    // startQuestionTimer()
    startQuestionTimer: function () {
        //console.log("startQuestionTimer() called.");
        // Start question timer
        TEP_EXAM.model.questionTimer.start();    
    },
    
    // stopQuestionTimer()
    // Save time spent on question and stop timer.
    stopQuestionTimer: function () {
        //console.log("stopQuestionTimer() called.");
        if (TEP_EXAM.model.questionTimer.isRunning())
        {            
            var time = TEP_EXAM.model.questionTimer.getTotalTimeValues().seconds;
            
            if (this.answers[this.state.questionNum - 1].timeElapsed)
            {
                //console.log("QuestionTimer: Adding " + time + " seconds.");
                this.answers[this.state.questionNum - 1].timeElapsed += time;
                //console.log("QuestionTimer: Now: " + this.answers[this.state.questionNum - 1].timeElapsed + " seconds.");
            }
            else
            {
                //console.log("QuestionTimer: Setting time to " + time + " seconds.");
                this.answers[this.state.questionNum - 1].timeElapsed = time;
            }
            
            TEP_EXAM.model.questionTimer.stop();
        }        
    },
    
    // startScheduledBreak()
    startScheduledBreak: function(callbackSecondsUpdated) {
        TEP_EXAM.model.state.intermissionMode = "scheduled-break";
                
        // Pause exam timer
        this.timer.pause();
        
        // Save break start time
        TEP_EXAM.model.state.breakStartTime = moment().unix();
        
        // Start break timer
        this.breakTimer.start({countdown: true, startValues: 
            {seconds: TEP_EXAM.model.BREAK_TIME * 
                TEP_EXAM.model.state.timeScale * 60}});

        this.breakTimer.addEventListener('secondsUpdated', function(e) {                         
                TEP_EXAM.model.checkTimersAndUpdate();
                callbackSecondsUpdated();
            }); 
        this.breakTimer.addEventListener('targetAchieved', 
            TEP_EXAM.model.endScheduledBreak);      
        
        TEP_EXAM.eventEmitter.emitEvent('EVENT_START_SCHEDULED_BREAK');
        TEP_EXAM.eventEmitter.emitEvent('EVENT_VIEW_INTERMISSION');
    },
    
    // resumeScheduledBreak()
    resumeScheduledBreak: function(callbackSecondsUpdated)
    {
        //console.log("resumeScheduledBreak() called.");
        var momentStarted = moment.unix(TEP_EXAM.model.state.breakStartTime);
        
        // If any break time remaining
        if (moment().diff(momentStarted, 'seconds', true) < 
            (TEP_EXAM.model.BREAK_TIME * TEP_EXAM.model.state.timeScale * 60))
        {
            var break_end = momentStarted.add(TEP_EXAM.model.BREAK_TIME * 
                TEP_EXAM.model.state.timeScale * 60, 'seconds');
            var remaining = break_end.diff(moment(), 'seconds');

            // Start break timer
            this.breakTimer.start({countdown: true, startValues: 
                {seconds: remaining}});
                
            this.breakTimer.addEventListener('secondsUpdated', function(e) {                         
                    TEP_EXAM.model.checkTimersAndUpdate();
                    callbackSecondsUpdated();
                }); 
            this.breakTimer.addEventListener('targetAchieved', 
                TEP_EXAM.model.endScheduledBreak);   
                
            TEP_EXAM.eventEmitter.emitEvent('EVENT_START_SCHEDULED_BREAK');
            TEP_EXAM.eventEmitter.emitEvent('EVENT_VIEW_INTERMISSION'); 
        }
        // Break time exceeded
        else
        {
            //console.log("no break time remains...");
            // Save break end time (maximum allowed)
            var momentBreakStart = moment.unix(TEP_EXAM.model.state.breakStartTime);
            var momentBreakEnd = momentBreakStart.add(TEP_EXAM.model.BREAK_TIME * 
                TEP_EXAM.model.state.timeScale * 60, 'seconds');
            TEP_EXAM.model.state.breakEndTime = momentBreakEnd.unix();

            this.endScheduledBreak(callbackSecondsUpdated);
        }                                          
    },

    // endScheduledBreak
    endScheduledBreak: function (callbackSecondsUpdated) {
        //console.log("endScheduledBreak() called.\n");

        // Check if break end has already been set, may have expired.
        if (!TEP_EXAM.model.state.breakEndTime)
        {
            // Save break end time
            TEP_EXAM.model.state.breakEndTime = moment().unix();
        }
        
        // Stop break timer
        TEP_EXAM.model.breakTimer.stop();
        
        // Start exam timer
        TEP_EXAM.model.startTimer(callbackSecondsUpdated);
        
        // Send event to notify exam timer view
        TEP_EXAM.eventEmitter.emitEvent('EVENT_END_SCHEDULED_BREAK');

        // Move on to next section
        TEP_EXAM.model.state.nextSection();
        TEP_EXAM.model.state.changeState("question");        
    },  

    // endExam()
    endExam: function() {
        TEP_EXAM.model.state.intermissionMode = "exam-submitted";
        TEP_EXAM.eventEmitter.emitEvent('EVENT_VIEW_INTERMISSION');
    },  
    
    // setQuestions()
    setQuestions: function (questionData) {
        this.questions = questionData;

        // Set question id's in answers
        var i;
        for (i = 0; i < 250; i++)
        {
            this.answers[i].id = this.questions[i].id;
        }

        this.state.updateCurrentQuestion();
    },
    
    // recordAnswer()
    recordAnswer: function (answer)
    {
        // If changing answer
        if (this.answers[this.state.questionNum - 1].choice &&
            this.answers[this.state.questionNum - 1].choice != answer)
        {
            if (this.answers[this.state.questionNum - 1].numTimesChanged == null)
            {
                this.answers[this.state.questionNum - 1].numTimesChanged = 1;   
            }
            else
            {
                this.answers[this.state.questionNum - 1].numTimesChanged++;
            }
        }
        
        // Record first choice
        if (this.answers[this.state.questionNum - 1].choice == null)
        {
            this.answers[this.state.questionNum - 1].firstChoice = answer;
        }
        
        // Record choice
        this.answers[this.state.questionNum - 1].choice = answer;
    },
    
    // recordGuess()
    recordGuess: function (isGuess)
    {
      this.answers[this.state.questionNum -1].guessed = isGuess;  
    },
    
    // recordDifficulty()
    recordDifficulty: function (value)
    {
      this.answers[this.state.questionNum -1].difficulty = value;  
    },

    // setErrorCondition()
    setErrorCondition: function (condition)
    {
        this.errorCondition = condition;
    },

    // setErrorMessage()
    setErrorMessage: function (message)
    {
        this.errorMessage = message;
    }
};

// State variables below will be serialized
TEP_EXAM.model.state = {
  id: null,
  startTime: null,          // exam start unix timestamp in seconds
  breakStartTime: null,     // break start unix timestamp in seconds
  breakEndTime: null,       // break end unix timestamp in seconds
  elapsedTime: null,        // total elapsed time in seconds
  timeScale: 1.0,           // 1x (normal), 1.5x, 2x (extended) time factor
  sectionNum: 1,
  questionNum: 1,
  answers: [],
  unanswered: [],
  marked: [],
  currentView:"",           // question, summary, intermission, error
  reviewMode: null,         // marked, unanswered, all
  reviewIndex: 0,           // index into review array
  intermissionMode: null,   // section-end, exam-end, 
                            // section-end-break, scheduled-break 
    
  // initialize()
  initialize: function (id) {
    // If id provided, init answer state (new exam).
    if (id)
    {
        this.id = id;

        // Set time scale if specified.
        if (timeScale)
        {
            this.timeScale = timeScale;
        }
        
        // Set up blank answers state
        var i;
        for (i = 0; i < 250; i++)
        {
            this.answers[i] = {
            id: 0,              // question id
            firstChoice: null,  // 1,2,3,4 or null
            choice: null,       // 1,2,3,4 or null
            marked: false,      // true/false
            strikethrough: [],  // array contains any of 1,2,3,4
            highlights: null,   // highlights object data or null
            guessed: false,     // true/false
            difficulty: null,   // "easy", "hard" or null
            numTimesChanged: null,
            timeElapsed: null   // number of seconds spent on question
            };
        }
    }
        
    // set shortcut
    TEP_EXAM.model.answers = this.answers; 
  },
  
  // restoreState()
  restoreState: function (savedState)
  {
      this.id = savedState.id;
      this.startTime = savedState.startTime;
      this.breakStartTime = savedState.breakStartTime;
      this.breakEndTime = savedState.breakEndTime;
      this.elapsedTime = savedState.elapsedTime;
      this.timeScale = savedState.timeScale;
      this.sectionNum = savedState.sectionNum;
      this.questionNum = savedState.questionNum;
      this.answers = savedState.answers.slice(0);
      this.unanswered = savedState.unanswered.slice(0);
      this.marked = savedState.marked.slice(0);
      this.currentView = savedState.currentView;
      this.reviewMode = savedState.reviewMode;
      this.reviewIndex = savedState.reviewIndex;
      this.intermissionMode = savedState.intermissionMode;
      
      //console.log("restoreState:");
      //console.log(this);
  },

  //setInitialState()
  setInitialState: function()
  {
      this.currentView = "question";
  },
  
  // changeState()
  changeState: function(newView) {
      if (newView == "question")
      {
          this.intermissionMode = null;
          this.currentView = newView;          
          TEP_EXAM.model.startQuestionTimer();          
          this.updateCurrentQuestion();
          TEP_EXAM.eventEmitter.emitEvent('EVENT_VIEW_QUESTION');
      }
      else if (newView == "summary")
      {
          this.intermissionMode = null;
          this.reviewMode = null; // clear review mode flag
          this.currentView = newView;
          TEP_EXAM.model.stopQuestionTimer();          
          this.updateSummaryState();
          TEP_EXAM.eventEmitter.emitEvent('EVENT_VIEW_SUMMARY');
      }
      else if (newView == "intermission")
      {
          TEP_EXAM.model.stopQuestionTimer();          

          // If exam time ended
          if (this.elapsedTime)
          {
            this.intermissionMode = "exam-end"
          }          
          else if (this.currentView == "summary")
          {
              // If moving on to scheduled break
              if (this.sectionNum == 2)
              {
                  this.intermissionMode = "section-end-break";
              }
              // Exam end screen
              else if (this.sectionNum == 5)
              {
                  this.intermissionMode = "exam-end"
              }
              // Section end screen
              else
              {
                  this.intermissionMode = "section-end";
              }
          }

        this.currentView = newView;
        TEP_EXAM.eventEmitter.emitEvent('EVENT_VIEW_INTERMISSION');
      }
      else if (newView == "error")
      {
        this.currentView = newView;
        TEP_EXAM.eventEmitter.emitEvent('EVENT_ERROR');
      }
  },
  
  // startReviewMode()
  // Set current question number based on review mode or specified
  // quesiton if passed in questionNum. Change view to question.
  startReviewMode: function(type, questionNum) {
      this.reviewMode = type;

      this.reviewIndex = 0;
      
      if (this.reviewMode == "marked")
      {
          this.questionNum = this.marked[this.reviewIndex] + 1;
      }
      else if (this.reviewMode == "unanswered")
      {
          this.questionNum = this.unanswered[this.reviewIndex] + 1;
      }
      // Review single question or All
      else
      {
          // Review single
          if (questionNum)
          {
            this.questionNum = questionNum;                          
          }
          // Review all
          else
          {
            // Go to first question in section
            this.questionNum = ((this.sectionNum - 1) * 
                TEP_EXAM.model.QUESTIONS_IN_SECTION) + 1;              
          }
      }
      
    this.changeState("question");                          
  },
  
  // updateCurrentQuestion()
  updateCurrentQuestion: function () {
      TEP_EXAM.model.currentQuestion = 
        TEP_EXAM.model.questions[TEP_EXAM.model.state.questionNum - 1];
      TEP_EXAM.eventEmitter.emitEvent('EVENT_QUESTION_CHANGED');
  },
  
  // prevQuestion()
  prevQuestion: function () {      
    // If not on first question in a section
    if ((this.questionNum - 1) % TEP_EXAM.model.QUESTIONS_IN_SECTION != 0)
    {
        TEP_EXAM.model.stopQuestionTimer();
        
        if (this.reviewMode)
        {
            this.reviewIndex--;
            if (this.reviewIndex < 0)
            {
                this.reviewIndex = 0;
            }

            if (this.reviewMode === "marked")
            {
                this.questionNum = this.marked[this.reviewIndex] + 1;                    
            }
            else if (this.reviewMode === "unanswered")
            {
                this.questionNum = this.unanswered[this.reviewIndex] + 1;                                    
            }
            // Review all
            else
            {
                this.questionNum--;
            }
        }
        // Not in review mode
        else
        {
            this.questionNum--;
        }
        
        TEP_EXAM.model.startQuestionTimer();
        
        this.updateCurrentQuestion();
    }
    return this.questionNum;    
  },
  
  // markQuestion()
  // Toggle marked state of question
  markQuestion: function () {
    TEP_EXAM.model.answers[TEP_EXAM.model.state.questionNum - 1].marked = 
        !TEP_EXAM.model.answers[TEP_EXAM.model.state.questionNum - 1].marked; 
    TEP_EXAM.eventEmitter.emitEvent('EVENT_QUESTION_CHANGED');        
  },
  
  // updateOptionStrike()
  // Toggle strike state of answer choice
  updateOptionStrike: function(choice) {
      var answer = TEP_EXAM.model.answers[TEP_EXAM.model.state.questionNum - 1];
      
      // If in strike array, remove it 
      var index = $.inArray(choice, answer.strikethrough);
      if (index != -1)
      {
          answer.strikethrough.splice(index, 1);
      }
      // Otherwise, add it.
      else
      {
          answer.strikethrough.push(choice);
      }
  },
  
  // updateHighlights()
  // Serialize question highlights object
  updateHighlights: function(data) {
      var answer = TEP_EXAM.model.answers[TEP_EXAM.model.state.questionNum - 1];
      answer.highlights = data;
  },
  
  // nextQuestion()
  nextQuestion: function () {
    TEP_EXAM.model.stopQuestionTimer();    
      	
    if (this.questionNum % TEP_EXAM.model.QUESTIONS_IN_SECTION === 0)
    {
        this.changeState("summary");
    }
    else
    {
        if (this.reviewMode)
        {
            this.reviewIndex++;

            if (this.reviewMode === "marked")
            {
                if (this.reviewIndex < this.marked.length)
                {
                    this.questionNum = this.marked[this.reviewIndex] + 1;  
                    TEP_EXAM.model.startQuestionTimer();                  
                }
                else
                {
                    this.changeState("summary");
                }
            }
            else if (this.reviewMode === "unanswered")
            {
                if (this.reviewIndex < this.unanswered.length)
                {
                    this.questionNum = this.unanswered[this.reviewIndex] + 1;  
                    TEP_EXAM.model.startQuestionTimer();
                }
                else
                {
                    this.changeState("summary");
                }                
            }
            // Review all
            else
            {
                this.questionNum++;  
                TEP_EXAM.model.startQuestionTimer();                  
            }        
        }
        // Not review mode
        else
        {
            this.questionNum++;    
            TEP_EXAM.model.startQuestionTimer();            
        }
        
        this.updateCurrentQuestion();
    }
    
    return this.questionNum;    
  },
  
  // 
  
  // nextSection()
  nextSection: function () {
    this.sectionNum++;
    this.questionNum = ((this.sectionNum - 1) * 
        TEP_EXAM.model.QUESTIONS_IN_SECTION) + 1;
    
    // Reset summary lists
    this.marked = [];
    this.unanswered = [];
    return this.sectionNum;
  },
  
  // updateSummaryState()
  // Update summary lists
  updateSummaryState: function() {
    this.unanswered = [];
    this.marked = [];
      
    // Set loop bounds between first and last question in section
    var i = (this.sectionNum - 1) * TEP_EXAM.model.QUESTIONS_IN_SECTION;   
    var lastQuestionNum = TEP_EXAM.model.state.sectionNum * TEP_EXAM.model.QUESTIONS_IN_SECTION;
    
    for (; i < lastQuestionNum; i++)
    {
        if (TEP_EXAM.model.answers[i].choice == null)
        {
            this.unanswered.push(i);
        }
        if (TEP_EXAM.model.answers[i].marked)
        {
            this.marked.push(i);
        }
    }
  }
};

//  VIEW
//
TEP_EXAM.view = {
    // initialize()
    initialize: function() {
        // Set up event handlers
        TEP_EXAM.eventEmitter.addListeners("EVENT_QUESTION_CHANGED", 
            [this.updateHeader, this.updateQuestionView, 
            this.updateQuestionNav]);
            
        TEP_EXAM.eventEmitter.addListeners("EVENT_VIEW_QUESTION", 
            [this.switchView, this.updateHeader, this.updateQuestionView,
                this.updateQuestionNav]);

        TEP_EXAM.eventEmitter.addListeners("EVENT_VIEW_SUMMARY", 
            [this.switchView, this.updateHeader, this.updateSummaryView,
                this.updateSummaryNav]);
            
        TEP_EXAM.eventEmitter.addListeners("EVENT_VIEW_INTERMISSION", 
            [this.switchView, this.updateHeader, this.updateIntermissionView,
                this.updateIntermissionNav]);   
                
        TEP_EXAM.eventEmitter.addListeners("EVENT_START_SCHEDULED_BREAK",
            [this.setupBreakTimerStart]);   
            
        TEP_EXAM.eventEmitter.addListeners("EVENT_END_SCHEDULED_BREAK",
            [this.setupTimerStart]);

        TEP_EXAM.eventEmitter.addListeners("EVENT_ERROR",
            [this.switchView, this.updateErrorView]);     
            
        // Disable context menu (right-click) on question div
        $("#fb_fld-QuestionView").attr("oncontextmenu", "return false;");
        
        // Setup text highlighter on question text
        // https://github.com/mir3z/texthighlighter/wiki
        $(".Question .body-copy").textHighlighter({
                onBeforeHighlight: function (range)
                {
                    //console.log("onBeforeHighlight() called.");
                    return true;
                },
                
                onAfterHighlight: function (range)
                {
                    TEP_EXAM.controller.highlightChanged();
                },
                
                onRemoveHighlight: function (hlt)
                {
                    TEP_EXAM.controller.highlightChanged();
                    //console.log("onRemoveHighlight() called:"); 
                    //console.log(hlt);       
                    return true;            
                }
            }
        );
        
        // Set default view and hide inactive
        this.switchView();

        this.updateCurrentView();
    },
        
    // switchView()
    // Toggle views to show current state
    switchView: function() {
        // Question/Review
        if (TEP_EXAM.model.state.currentView == "question")
        {
            $("#HeaderView").show();
            $("#fb_fld-QuestionView").show();
            $("#fb_fld-QuestionMetaView").show()
            $("#fb_fld-IntermissionView").hide();
            $("#fb_fld-SummaryView").hide();
            $("#fb_fld-ErrorView").hide();                 

            // Toggle nav
            $("#NavQuestion").show();
            $("#NavSummary").hide();
            $("#NavIntermission").hide();
        }
        // Review Summary
        else if (TEP_EXAM.model.state.currentView == "summary")
        {
            // Toggle views
            $("#HeaderView").show();
            $("#fb_fld-SummaryView").show();     
            $("#fb_fld-QuestionView").hide();
            $("#fb_fld-QuestionMetaView").hide()
            $("#fb_fld-IntermissionView").hide();
            $("#fb_fld-ErrorView").hide();                 
            
            // Toggle nav
            $("#NavSummary").show();
            $("#NavQuestion").hide();
            $("#NavIntermission").hide();
        }
        // Intermission
        else if (TEP_EXAM.model.state.currentView == "intermission")
        {
            $("#HeaderView").show();
            $("#fb_fld-IntermissionView").show();
            $("#fb_fld-QuestionView").hide();
            $("#fb_fld-QuestionMetaView").hide()
            $("#fb_fld-SummaryView").hide();   
            $("#fb_fld-ErrorView").hide();                              
            
            // Toggle nav
            $("#NavIntermission").show();
            $("#NavSummary").hide();
            $("#NavQuestion").hide();
        } 
        // Error
        else if (TEP_EXAM.model.state.currentView == "error")
        {
            $("#HeaderView").hide();
            $("#fb_fld-IntermissionView").hide();
            $("#fb_fld-QuestionView").hide();
            $("#fb_fld-QuestionMetaView").hide()
            $("#fb_fld-SummaryView").hide();   
            $("#fb_fld-ErrorView").show();                              
            
            // Toggle nav
            $("#NavIntermission").hide();
            $("#NavSummary").hide();
            $("#NavQuestion").hide();            
        }
        else // none, hide all views
        {
            $("#HeaderView").hide();
            $("#fb_fld-IntermissionView").hide();
            $("#fb_fld-QuestionView").hide();
            $("#fb_fld-QuestionMetaView").hide()
            $("#fb_fld-SummaryView").hide();   
            $("#fb_fld-ErrorView").hide();                              
            
            // Toggle nav
            $("#NavIntermission").hide();
            $("#NavSummary").hide();
            $("#NavQuestion").hide();                        
        }
    },

    // updateCurrentView()
    updateCurrentView: function() {
        // Update views
        this.updateHeader();
        this.updateTimer();
        
        if (TEP_EXAM.model.state.currentView == "question")
        {
            this.updateQuestionView();
            this.updateQuestionNav();          
        }
        else if (TEP_EXAM.model.state.currentView == "summary")
        {
            this.updateSummaryView();
            this.updateSummaryNav();    
        }
        else if (TEP_EXAM.model.state.currentView == "intermission")
        {
            this.updateIntermissionView();
            this.updateIntermissionNav();    
        }
    },
    
    // updateRadioButtons()
    // Updates all the radio buttons for new question
    updateRadioButtons: function () {
        // Clear all
        $("#exam-form").trigger("reset");
        
        // Restore state if question was answered
        if (TEP_EXAM.model.answers[TEP_EXAM.model.state.questionNum - 1].choice != null)
        {
            var id = "#Answer" + (TEP_EXAM.model.answers[TEP_EXAM.model.state.questionNum - 1].choice - 1);
            $(id).prop("checked", true);
        }
    },
    
    // updateMetaControls()
    // Update state of guessed and difficulty controls
    updateMetaControls: function() {              
      $("#GuessedCheck0").prop("checked", 
        TEP_EXAM.model.answers[TEP_EXAM.model.state.questionNum - 1].guessed);
      
      var difficulty = TEP_EXAM.model.answers[TEP_EXAM.model.state.questionNum - 1].difficulty;
      if (difficulty)
      {
          difficulty = difficulty.charAt(0).toUpperCase() + difficulty.slice(1);
          $("input[name=DifficultyRadio][value=" + difficulty + "]").prop('checked', true);  
      }
    },
    
    // updateHeader()
    updateHeader: function () {
        // update top header
        var username = $("#username");
        var email = $("#email");

        if (amUser)
        {
            username.text(amUser);
            email.text(amEmail);
        }

        var questionLabel = $("#questionDisplay");
        var sectionLabel = $("#sectionDisplay");
        
        sectionLabel.text("Section " + TEP_EXAM.model.state.sectionNum + " of 5");
        
        if (TEP_EXAM.model.state.currentView == "question")
        {
            questionLabel.show();
            questionLabel.text("Question " + TEP_EXAM.model.state.questionNum + " of " +
                TEP_EXAM.model.state.sectionNum * TEP_EXAM.model.QUESTIONS_IN_SECTION);
        }
        else if (TEP_EXAM.model.state.currentView == "summary")
        {
            questionLabel.show();
            questionLabel.text("Review");
        }
        // Intermission View
        else
        {
            questionLabel.hide();
            
            if (TEP_EXAM.model.state.intermissionMode == "scheduled-break")
            {
                $("#sectionDisplay").text("Scheduled Break");
            }
        }        
    },
    
    // setupTimerStart()
    setupTimerStart: function() {
        var timeString = TEP_EXAM.model.timer.getTimeValues().toString();
        
        // Setup initial timer
        $("#TimerDisplay").html(timeString);
    },
    
    // setupBreakTimerStart()
    setupBreakTimerStart: function() {
        var breakTime = moment.duration(TEP_EXAM.model.BREAK_TIME * 
            TEP_EXAM.model.state.timeScale * 60, 'seconds');         

        var minutesStr = ("0" + breakTime.minutes()).slice(-2);
        var secondsStr = ("0" + breakTime.seconds()).slice(-2);

        // Setup break timer at start of 15 minutes (scaled)
        $("#TimerDisplay").html("00:" + minutesStr + ":" + secondsStr);

        // Set page time string

        if (secondsStr == "00")
        {
            $("#break-time").html(minutesStr + " minutes");
        }
        // Show minutes and seconds
        else
        {
            $("#break-time").html(minutesStr + " minutes and " + 
                breakTime.seconds() + " seconds");
        }
    },
    
    // updateTimer()
    updateTimer: function() {        
        if (TEP_EXAM.model.state.intermissionMode == "scheduled-break")
        {
            // Show break timer
            $("#TimerDisplay").html(TEP_EXAM.model.breakTimer.getTimeValues().toString());
        }
        else
        {
            // Show exam timer
            $("#TimerDisplay").html(TEP_EXAM.model.timer.getTimeValues().toString());          
        }
    },
        
    // updateQuestionView()
    updateQuestionView: function() {
        // Update question text
        var bodyDiv = $(".Question .body-copy");
        bodyDiv[0].innerHTML = TEP_EXAM.model.currentQuestion.question.replace(/MOST|BEST|INITIAL/g, function(x){return '<strong>'+x+'</strong>';});
		
        // Restore any highlighting
        var highlights = TEP_EXAM.model.answers[TEP_EXAM.model.state.questionNum - 1].highlights;
        if (highlights)
        {
            var hltr = $(".Question .body-copy").getHighlighter();
            hltr.deserializeHighlights(highlights);        
        }
        
        // Set up question text click handler (remove highlight)
		$("#QuestionView .body-copy").off('mouseup', '.highlighted').on('mouseup', '.highlighted', function(e){
			var hltr = $(".Question .body-copy").getHighlighter();
			if(!$(this).parent().hasClass('highlighter-context')) var context = $(this).parent()[0];
			else var context = this;
			
			var nextOuter = $(context.nextSibling);
			var nextInner = $(context.nextSibling).find('.highlighted');
			var prevOuter = $(context.previousSibling);
			var prevInner = $(context.previousSibling).find('.highlighted');
			
			hltr.removeHighlights(this);
			if(nextOuter.size() > 0 && nextOuter.hasClass('highlighted')) nextOuter.trigger('mouseup');
			if(nextInner.size() > 0) nextInner.trigger('mouseup');
			if(prevOuter.size() > 0 && prevOuter.hasClass('highlighted')) prevOuter.trigger('mouseup');
			if(prevInner.size() > 0) prevInner.trigger('mouseup');
			
		})
        
        // Update answer choices

        // Remove any strikethroughs
        $('.radio-column label.radio.checkbox').removeClass('eliminate');
        
        // Choice 1
        var label = $("label[for='Answer0'] > .rf-multiselect-item-label");
        label.html('<span class="choiceNum">1. </span><span id="choiceText1">' + 
            TEP_EXAM.model.currentQuestion.answer1 + '</span>');
            
        // Display strikethrough state for option
        var answer = TEP_EXAM.model.answers[TEP_EXAM.model.state.questionNum - 1];
        var index = $.inArray(1, answer.strikethrough);
        if (index != -1)
        {
            label.parent().addClass('eliminate');
        }
            
        // Set up radio button label click handler
        $("#choiceText1").mousedown(function (ev) {
            // If left button click 
            if (ev.which === 1)
            {
                TEP_EXAM.controller.radioLabelClicked(1);
            } 
        });
        
        // Choice 2
        var label = $("label[for='Answer1'] > .rf-multiselect-item-label");
        label.html('<span class="choiceNum">2. </span><span id="choiceText2">' + 
            TEP_EXAM.model.currentQuestion.answer2 + '</span>');
       
        // Display strikethrough state for option
        var answer = TEP_EXAM.model.answers[TEP_EXAM.model.state.questionNum - 1];
        var index = $.inArray(2, answer.strikethrough);
        if (index != -1)
        {
            label.parent().addClass('eliminate');
        }
            
        // Set up radio button label click handler
        $("#choiceText2").mousedown(function (ev) {
            // If left button click 
            if (ev.which === 1)
            {
                TEP_EXAM.controller.radioLabelClicked(2);
            } 
        });            

        // Choice 3
        var label = $("label[for='Answer2'] > .rf-multiselect-item-label");
        label.html('<span class="choiceNum">3. </span><span id="choiceText3">' + 
            TEP_EXAM.model.currentQuestion.answer3 + '</span>');

        // Display strikethrough state for option
        var answer = TEP_EXAM.model.answers[TEP_EXAM.model.state.questionNum - 1];
        var index = $.inArray(3, answer.strikethrough);
        if (index != -1)
        {
            label.parent().addClass('eliminate');
        }

        // Set up radio button label click handler
        $("#choiceText3").mousedown(function (ev) {
            // If left button click 
            if (ev.which === 1)
            {
                TEP_EXAM.controller.radioLabelClicked(3);
            } 
        });  
        
        // Choice 4
        var label = $("label[for='Answer3'] > .rf-multiselect-item-label");
        label.html('<span class="choiceNum">4. </span><span id="choiceText4">' + 
            TEP_EXAM.model.currentQuestion.answer4 + '</span>');

        // Display strikethrough state for option
        var answer = TEP_EXAM.model.answers[TEP_EXAM.model.state.questionNum - 1];
        var index = $.inArray(4, answer.strikethrough);
        if (index != -1)
        {
            label.parent().addClass('eliminate');
        }
        
        // Set up radio button label click handler
        $("#choiceText4").mousedown(function (ev) {
            // If left button click 
            if (ev.which === 1)
            {
                TEP_EXAM.controller.radioLabelClicked(4);
            } 
        });                    
        
        // Update the state of radio buttons        
        TEP_EXAM.view.updateRadioButtons();
        
        // Update the state of meta controls (guessed/difficulty)
        TEP_EXAM.view.updateMetaControls();
                
        // Update marked button state
        if (TEP_EXAM.model.answers[TEP_EXAM.model.state.questionNum - 1].marked)
        {
            $("#Mark").attr("value", "Unmark");
              
        }
        else
        {
            $("#Mark").attr("value", "Mark");
        }        
    },
    
    
    updateQuestionNav: function() {
        // Set previous question button enabled for all but first question
        if ((TEP_EXAM.model.state.questionNum - 1) % TEP_EXAM.model.QUESTIONS_IN_SECTION != 0)
        {
            $("#Previous").removeClass("disabled");
        }
        else
        {
            $("#Previous").addClass("disabled");
        }
        
        if (TEP_EXAM.model.state.reviewMode)
        {
            $("#Review").show();

            // If reviewing marked or unanswered
            if (TEP_EXAM.model.state.reviewMode != "all")
            {
                // Set previous question button enabled for all but first
                if (TEP_EXAM.model.state.reviewIndex != 0)
                {
                    $("#Previous").removeClass("disabled");            
                }
                else
                {
                    $("#Previous").addClass("disabled");            
                }
            }
        }
        else
        {
            $("#Review").hide();
        }
    },
    
    updateSummaryView: function () {
        var reviewDiv = $("#fb_fld-SummaryView");        
        
        // Table start and header row
        var output = "<table><tr><td>Question</td><td>Status</td></tr>";
        
        // 50 Table rows
        var i;
        for (i = 0; i < 50; i++)
        {
            var offset = (TEP_EXAM.model.state.sectionNum - 1) * 
                TEP_EXAM.model.QUESTIONS_IN_SECTION;

            // Get answer
            var answer = TEP_EXAM.model.answers[i + offset];

            // Add question number button
            output += "<td><button type='button' ";
            
            // Set class for marked/unmarked question
            if (answer.marked)
            {
                output += "class='marked-question' ";                
            }
            else
            {
                output += "class='unmarked-question' ";               
            }
            
            output += "onclick='TEP_EXAM.controller.reviewQuestionButtonClicked("
            output += (i + offset) + ")'>";
            output += "Question " + (i + offset + 1);
            output += "</button>";   
            
            // test only to show time elapsed for question
            //output += " T: " + answer.timeElapsed;        
            
            // Uncomment to output answer choice
            /*if (answer.choice != null)
            {
                output += " : " + answer.choice;
            }*/
            
            if (answer.choice != null)
            {
                output += "</td><td>Complete</td>";
            }
            else
            {
                output += "</td><td class='status-incomplete'>Incomplete</td>";
            }
            
            // Close row
            output += "</tr>";
        }
        
        // Table end
        output += "</table>";
        
        // Output HTML
        reviewDiv.html(output);
    },
    
    updateSummaryNav: function() {        
        if (TEP_EXAM.model.state.marked.length > 0)
        {
            $("#ReviewMarked").show();
        }
        else
        {
            $("#ReviewMarked").hide();
        }
        
        if (TEP_EXAM.model.state.unanswered.length > 0)
        {
            $("#ReviewIncomplete").show();
        }
        else
        {
            $("#ReviewIncomplete").hide();
        }
    },
    
    // updateIntermissionView()
    updateIntermissionView: function() {
        if (TEP_EXAM.model.state.intermissionMode == "section-end")
        {            
            $(".SectionEnd").show();
            $("#next-section").html(TEP_EXAM.model.state.sectionNum + 1);
            
            // Hide other text
            $(".SectionEndBreak").hide();
            $(".ScheduledBreak").hide();
            $(".ExamEnd").hide();
            $(".ExamSubmitted").hide();            
        }
        else if (TEP_EXAM.model.state.intermissionMode == "exam-end")
        {
            $(".ExamEnd").show();
            
            // Hide other text
            $(".SectionEnd").hide();
            $(".SectionEndBreak").hide();
            $(".ScheduledBreak").hide();
            $(".ExamSubmitted").hide();            
        }
        else if (TEP_EXAM.model.state.intermissionMode == "exam-submitted")
        {
            $(".ExamSubmitted").show();

            // Hide other text
            $(".SectionEnd").hide();
            $(".SectionEndBreak").hide();
            $(".ScheduledBreak").hide();            
            $(".ExamEnd").hide();
        }
        else if (TEP_EXAM.model.state.intermissionMode == "section-end-break")
        {
            $(".SectionEndBreak").show();
            $(".SectionEnd").hide();
            $(".ScheduledBreak").hide();
            $(".ExamEnd").hide();
            $(".ExamSubmitted").hide();            
        }
        else if (TEP_EXAM.model.state.intermissionMode == "scheduled-break")
        {
            $(".ScheduledBreak").show();
            $(".SectionEndBreak").hide();
            $(".SectionEnd").hide();            
            $(".ExamEnd").hide();
            $(".ExamSubmitted").hide();            
        }
    },
    
    // updateIntermissionNav()
    updateIntermissionNav: function() {
        if (TEP_EXAM.model.state.intermissionMode == "scheduled-break" ||
            TEP_EXAM.model.state.intermissionMode == "exam-submitted" || 
            (TEP_EXAM.model.state.intermissionMode == "exam-end" && 
            TEP_EXAM.model.state.elapsedTime))
        {
            // Hide review button
            $("#ReviewIntermission").hide();            
        }
        else
        {    
            // Show nav
            $("#ReviewIntermission").show();
            $("#NextIntermission").show();
        }

        if (TEP_EXAM.model.state.intermissionMode == "exam-end")
        {
            $("#NextIntermission").prop('value', 'Submit');
        }
        else if (TEP_EXAM.model.state.intermissionMode == "exam-submitted")
        {
            $("#NextIntermission").prop('value', 'Next');            
        }
    },

    // updateErrorView()
    updateErrorView: function () {
        if (TEP_EXAM.model.errorCondition == "ERROR_NET")
        {
            // Show net error
            $("#fb_fld-netError").show();

            // Hide others
            $("#fb_fld-browserError").hide();
            $("#fb_fld-startError").hide();
            $("#fb_fld-submitError").hide();
            $("#fb_fld-saveError").hide();                        
        }
        else if (TEP_EXAM.model.errorCondition == "ERROR_BROWSER")
        {
            // Show browser error
            $("#fb_fld-browserError").show();

            // Hide others
            $("#fb_fld-netError").hide();
            $("#fb_fld-startError").hide();
            $("#fb_fld-submitError").hide();  
            $("#fb_fld-saveError").hide();                                  
        }
        else if (TEP_EXAM.model.errorCondition == "ERROR_START")
        {
            // Show start error
            $("#fb_fld-startError").show();

            // Hide others
            $("#fb_fld-netError").hide();
            $("#fb_fld-browserError").hide();
            $("#fb_fld-submitError").hide();
            $("#fb_fld-saveError").hide();                        
        }
        else if (TEP_EXAM.model.errorCondition == "ERROR_SUBMIT")
        {
            // Show submit error
            $("#fb_fld-submitError").show();

            // Hide others
            $("#fb_fld-netError").hide();
            $("#fb_fld-browserError").hide();
            $("#fb_fld-startError").hide();
            $("#fb_fld-saveError").hide();            
        }
        else if (TEP_EXAM.model.errorCondition == "ERROR_SAVE")
        {
            // Show save error
            $("#fb_fld-saveError").show();

            // Hide others
            $("#fb_fld-netError").hide();
            $("#fb_fld-browserError").hide();
            $("#fb_fld-startError").hide();
            $("#fb_fld-submitError").hide();
        }        
    }
};

//  CONTROLLER
//
TEP_EXAM.controller = {

    // saveExamState()
    // JSON encode exam state object and save to local storage
    saveExamState: function () {
        try {
            localStorage.setItem("ExamState", JSON.stringify(TEP_EXAM.model.state));    
        }
        catch(error)
        {
            var message = error.toString();
            
            // Append stack trace if available
            if (error.stack)
            {
                message += "\nStack:\n" + error.stack;                
            }

            // Show error.
            TEP_EXAM.model.setErrorCondition("ERROR_SAVE");
            TEP_EXAM.model.setErrorMessage(message);
            TEP_EXAM.model.state.changeState("error");        
        }
    },

    // Question View Input
    
    // prevButtonClicked()
    prevButtonClicked: function () {
        TEP_EXAM.model.state.prevQuestion();
        TEP_EXAM.controller.saveExamState();
    },

    // markButtonClicked()
    markButtonClicked: function () {
        TEP_EXAM.model.state.markQuestion();
        TEP_EXAM.controller.saveExamState();
    },
    
    // highlightChanged()
    // Update highlight state.
    highlightChanged: function () {
        var hltr = $(".Question .body-copy").getHighlighter();        
        TEP_EXAM.model.state.updateHighlights(hltr.serializeHighlights());    
        TEP_EXAM.controller.saveExamState();
    },
        
    // nextButtonClicked()
    nextButtonClicked: function () {
        TEP_EXAM.model.state.nextQuestion();
        TEP_EXAM.controller.saveExamState();
    },
        
    // reviewButtonClicked()
    reviewButtonClicked: function () {
        TEP_EXAM.model.state.changeState("summary");
        TEP_EXAM.controller.saveExamState();        
    },

    // choiceRadioClicked()
    choiceRadioClicked: function(value) {
        TEP_EXAM.model.recordAnswer(parseInt(value));  
        TEP_EXAM.controller.saveExamState();
    },
    
    // radioLabelClicked()
    // Toggle option strikethrough
    radioLabelClicked: function (choice) {
        TEP_EXAM.model.state.updateOptionStrike(choice);
        TEP_EXAM.controller.saveExamState();
    },
    
    // guessedCheckboxClicked()
    guessedCheckboxClicked: function(value) {
        TEP_EXAM.model.recordGuess(value);
        TEP_EXAM.controller.saveExamState();
    },
    
    // difficultyRadioClicked()
    difficultyRadioClicked: function(value) {
        TEP_EXAM.model.recordDifficulty(value);
        TEP_EXAM.controller.saveExamState();
    },

    // Summary View Input
    
    // reviewQuestionButtonClicked()
    reviewQuestionButtonClicked: function (questionIndex) {
        TEP_EXAM.model.state.startReviewMode("all", questionIndex + 1);
        TEP_EXAM.controller.saveExamState();
    },

    // reviewAllButtonClicked()
    reviewAllButtonClicked: function() {
        TEP_EXAM.model.state.startReviewMode("all", null);
        TEP_EXAM.controller.saveExamState();
    },
    
    // reviewMarkedButtonClicked()
    reviewMarkedButtonClicked: function() {
        TEP_EXAM.model.state.startReviewMode("marked", null);
        TEP_EXAM.controller.saveExamState();
    },

    // reviewIncompleteButtonClicked()
    reviewIncompleteButtonClicked: function() {
        TEP_EXAM.model.state.startReviewMode("unanswered", null);
        TEP_EXAM.controller.saveExamState();
    },
    
    // nextSummaryButtonClicked()
    endSectionButtonClicked: function () {
        TEP_EXAM.model.state.changeState("intermission");
        TEP_EXAM.controller.saveExamState();
    },
    
    // Intermission View Input
    
    // reviewIntermissionButtonClicked()
    reviewIntermissionButtonClicked: function() {
        TEP_EXAM.model.state.changeState("summary");
        TEP_EXAM.controller.saveExamState();
    },
    
    // nextIntermissionButtonClicked()
    nextIntermissionButtonClicked: function() {
        if (TEP_EXAM.model.state.intermissionMode == "section-end-break")
        {
            // Start scheduled break
            TEP_EXAM.model.startScheduledBreak(TEP_EXAM.view.updateTimer);
            TEP_EXAM.controller.saveExamState();
        }
        else if (TEP_EXAM.model.state.intermissionMode == "scheduled-break")
        {
            TEP_EXAM.model.endScheduledBreak();
            TEP_EXAM.controller.saveExamState();            
        }
        else if (TEP_EXAM.model.state.intermissionMode == "exam-end")
        {
            TEP_EXAM.model.stopTimer();
            TEP_EXAM.controller.saveExamState();
            
            // Submit exam and move on to survey entry screen.
            var savedState = localStorage.getItem("ExamState");
            if (savedState)
            {   
                // Disable review and submit buttons
                $("#NextIntermission").attr("disabled", true);
                $("#ReviewIntermission").attr("disabled", true);

                // Enable spinner
                $("#spinner").css("visibility", "visible");

                var request = $.ajax({
                    type: "POST",
                    url: EXAM_URL,
                    data: savedState,
                });

                request.done(function (response, textStatus, jqXHR)
                {
                    // Disable spinner
                    $("#spinner").css("visibility", "hidden");

                    // Re-enable submit button
                    $("#NextIntermission").attr("disabled", false);
                    
                    if (response == "OK")
                    {                        
                        TEP_EXAM.model.endExam();
                        TEP_EXAM.controller.saveExamState();
                    }
                    else
                    {
                        // Show error.
                        TEP_EXAM.model.setErrorCondition("ERROR_SUBMIT");
                        TEP_EXAM.model.setErrorMessage(response);
                        TEP_EXAM.model.state.changeState("error");
                    }
                });

                request.fail(function (jqXHR, textStatus, errorThrown)
                {
                    // Re-enable submit button
                    $("#NextIntermission").attr("disabled", false);
                    
                    alert("Unable to communicate with the server. " + 
                        "Please check your internet connection and try again.");
                });
            }
            // Unable to retrieve exam state from localStorage.
            else
            {
                // Show error.
                TEP_EXAM.model.setErrorCondition("ERROR_SAVE");
                TEP_EXAM.model.setErrorMessage("Unable to retrieve ExamState from localStorage prior to submit.");
                TEP_EXAM.model.state.changeState("error");
            }
        }
        else if (TEP_EXAM.model.state.intermissionMode == "exam-submitted")
        {
            // open survey page            
            window.location.replace(SURVEY_URL);
        }
        else
        {
            // Move on to next section
            TEP_EXAM.model.state.nextSection();
            TEP_EXAM.model.state.changeState("question");
            TEP_EXAM.controller.saveExamState();
        }
    },
    
    // startExam()
    startExam: function () {
        // If exam hasn't ended        
        if (TEP_EXAM.model.state.elapsedTime == null)
        {
            // If on scheduled break
            if (TEP_EXAM.model.state.intermissionMode == "scheduled-break")
            {
                TEP_EXAM.model.resumeScheduledBreak(TEP_EXAM.view.updateTimer);                
            }
            else
            {
                // Setup exam timer
                TEP_EXAM.model.startTimer(TEP_EXAM.view.updateTimer);
                TEP_EXAM.eventEmitter.addListeners("EVENT_EXAM_TIMER_EXPIRED",
                    [TEP_EXAM.controller.saveExamState]);
                    
                // If in question view, start question timer.
                if (TEP_EXAM.model.state.currentView === "question")
                {
                    TEP_EXAM.model.startQuestionTimer();
                }
            }
        }

        // Update views
        TEP_EXAM.view.switchView();
        TEP_EXAM.view.updateCurrentView();

        this.saveExamState();        
    },

    // hasRequiredBrowserFeatures()
    hasRequiredBrowserFeatures: function () {
        if (Modernizr.eventlistener &&
            Modernizr.json &&
            Modernizr.localstorage)
            return true;
        return false;
    },

    // reportErrorToServer()
    reportErrorToServer: function () {
        var errorData = {
            user: amUser,
            error: TEP_EXAM.model.errorCondition,
            message: TEP_EXAM.model.errorMessage,
            client: JSON.stringify(browserReportSync())
        };

        var request = $.ajax({
            type: "POST",
            url: ERROR_URL,
            data: JSON.stringify(errorData),
        });

        request.done(function (response, textStatus, jqXHR)
        {
        });

        request.fail(function (jqXHR, textStatus, errorThrown)
        {
        });
    },

    // initialize()
    // Initialize application on page load.
    initialize: function () {
        TEP_EXAM.view.initialize();

        TEP_EXAM.eventEmitter.addListeners("EVENT_ERROR",
            [this.reportErrorToServer]);     
        
        if (!this.hasRequiredBrowserFeatures())
        {
            // Show error.
            TEP_EXAM.model.setErrorCondition("ERROR_BROWSER");
            TEP_EXAM.model.state.changeState("error");            
            return;            
        }

        // Clear out tutorial session vars.
        sessionStorage.removeItem("TutorialState");
        sessionStorage.removeItem("TimeString");

        // Try to retrieve saved session if no new exam arguments passed
        if (!examNum)
        {
            var savedState = localStorage.getItem("ExamState");
            if (savedState)
            {            
                TEP_EXAM.model.state.restoreState(JSON.parse(savedState));
            }
            else
            {
                // Show error.
                TEP_EXAM.model.setErrorCondition("ERROR_START");
                TEP_EXAM.model.setErrorMessage("No examNum provided and failed to get existing state from localStorage.");
                TEP_EXAM.model.state.changeState("error");
                return;
            }            
        }
        
        // If no existing exam id, setup for new exam
        if (TEP_EXAM.model.state.id == null)
        {
            // Build URL
            var URL = EXAM_URL;
            URL += "?action=new";               // new exam
            URL += "&examNum=" + examNum;       // exam num
            URL += "&examAttempt=" + examAttempt;// attempt num
            URL += "&timeScale=" + timeScale;   // time scale from form 

            // Get exam id from server.
            $.get(URL, 
                function(data, status)
                {
                    if (status === "success")
                    {
                        // If valid exam ID
                        if (data != 0)
                        {
                            TEP_EXAM.model.initialize(data);
                            TEP_EXAM.model.state.setInitialState();
                            TEP_EXAM.controller.getExamQuestions();
                        }
                        else
                        {
                            // Show error.
                            TEP_EXAM.model.setErrorCondition("ERROR_START");
                            TEP_EXAM.model.setErrorMessage("No exam ID received from server.");
                            TEP_EXAM.model.state.changeState("error");
                        }
                    }
                    // network request error
                    else
                    {
                        // Show error.
                        TEP_EXAM.model.setErrorCondition("ERROR_NET");
                        TEP_EXAM.model.setErrorMessage("Get exam ID request failed.");
                        TEP_EXAM.model.state.changeState("error");
                    }
                });
        }
        // Resuming exam
        else
        {
            // Initialize model without existing id
            TEP_EXAM.model.initialize(null);
            this.getExamQuestions();
        }    
    },

    // Request exam question data from server
    getExamQuestions: function () 
    {
        var URL = EXAM_URL + "?action=getQuestions";
        URL += "&id=" + TEP_EXAM.model.state.id;
        $.get(URL,          
            function(data, status)
            {
                if (status === "success")
                {
                    if (data != null)
                    {
                        data = Base64.decode(data);
                        TEP_EXAM.model.setQuestions(JSON.parse(data));
                        TEP_EXAM.controller.startExam();
                    }
                    else
                    {
                        // Show error.
                        TEP_EXAM.model.setErrorCondition("ERROR_START");
                        TEP_EXAM.model.setErrorMessage("No question data received from server.");
                        TEP_EXAM.model.state.changeState("error");
                    }
                }
                // network request error
                else
                {
                    // Show error.
                    TEP_EXAM.model.setErrorCondition("ERROR_NET");
                    TEP_EXAM.model.setErrorMessage("getQuestions request failed.");
                    TEP_EXAM.model.state.changeState("error");
                }
            });
    }
}

// Application start
$(document).ready(function()
{
    TEP_EXAM.controller.initialize();
    //console.log("Document ready called.")
	
	$('.radio-column label.radio.checkbox').click(function(e){
		if($(this).parents('#fb_fld-QuestionMetaView').size() == 0){
			e.preventDefault();
			$(this).toggleClass('eliminate');
		}
	});
	
	$('.radio-column label.radio.checkbox input[type="radio"]').click(function(e){
		if($(this).parents('#fb_fld-QuestionMetaView').size() == 0) e.stopPropagation();
	});
	
	window.onbeforeunload = function(e){
		var dialogText = 'Are you sure you want to quit now?';
		e.returnValue = dialogText;
		return dialogText;
	}
});

$(window).load(function ()
{
    //console.log("Window load called.")
});

// Utility
function getFormattedDate() {
    var date = new Date();
    var str = date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate() + " " +  date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds();

    return str;
}